---

- name: "Create funkwhale user"
  become: true
  user:
    name: "{{ funkwhale_username }}"
    shell: /bin/false
    home: "{{ funkwhale_install_path }}"

- name: "Create funkwhale directories"
  become: true
  file:
    path: "{{ item }}"
    owner: "{{ funkwhale_username }}"
    state: directory
  with_items:
    - "{{ funkwhale_install_path }}"
    - "{{ funkwhale_media_path }}"
    - "{{ funkwhale_static_path }}"
    - "{{ funkwhale_music_path }}"
    - "{{ funkwhale_config_path }}"

- name: Check if django_secret_key file is setup
  stat:
    path: "{{ funkwhale_config_path }}/django_secret_key"
  register: "result_django_secret_key"

- name: "Generate a random secret key"
  when: result_django_secret_key.stat.exists == False
  become: true
  become_user: "{{ funkwhale_username }}"
  command: "openssl rand -hex 25"
  register: result_secret_key_generation

- name: "Create django_secret_key file"
  when: not ansible_check_mode and result_django_secret_key.stat.exists == False
  become: true
  become_user: "{{ funkwhale_username }}"
  copy:
    content: "{{ result_secret_key_generation.stdout }}"
    dest: "{{ funkwhale_config_path }}/django_secret_key"

- name: "Setup a dummy secret key"
  when: ansible_check_mode
  set_fact:
    django_secret_key: "dummy_secret_key_for_check_mode"

- name: "Retrieve secret key from {{ funkwhale_config_path }}/django_secret_key"
  when: not ansible_check_mode
  slurp:
    src: "{{ funkwhale_config_path }}/django_secret_key"
  register: secret_key

- name: "Register secret key"
  when: not ansible_check_mode
  set_fact:
    django_secret_key: "{{ secret_key['content'] | b64decode }}"

- name: "Create funkwhale configuration file"
  become: true
  become_user: "{{ funkwhale_username }}"
  template:
    src: env.j2
    dest: "{{ funkwhale_config_path }}/.env"
    owner: "{{ funkwhale_username }}"
    mode: 0600
  notify:
    - restart funkwhale

- name: Download front-end files
  become: true
  become_user: "{{ funkwhale_username }}"
  when: funkwhale_frontend_managed
  unarchive:
    src: https://dev.funkwhale.audio/funkwhale/funkwhale/builds/artifacts/{{ funkwhale_version }}/download?job=build_front
    dest: "{{ funkwhale_install_path }}"
    remote_src: true
  notify:
    - reload funkwhale

- name: Download api files
  become: true
  become_user: "{{ funkwhale_username }}"
  unarchive:
    src: https://dev.funkwhale.audio/funkwhale/funkwhale/builds/artifacts/{{ funkwhale_version }}/download?job=build_api
    dest: "{{ funkwhale_install_path }}"
    remote_src: true
  notify:
    - reload funkwhale

- name: "Setup virtualenv"
  become: true
  become_user: "{{ funkwhale_username }}"
  pip:
    name: wheel
    virtualenv: "{{ funkwhale_install_path }}/virtualenv"
    virtualenv_python: python3

- name: "Install python dependencies"
  become: true
  become_user: "{{ funkwhale_username }}"
  pip:
    requirements: "{{ funkwhale_install_path }}/api/requirements.txt"
    virtualenv: "{{ funkwhale_install_path }}/virtualenv"
    virtualenv_python: python3
  notify:
    - reload funkwhale

- name: "Install gunicorn/uvicorn"
  become: true
  become_user: "{{ funkwhale_username }}"
  pip:
    name:
      - gunicorn
      - uvicorn
    virtualenv: "{{ funkwhale_install_path }}/virtualenv"
    virtualenv_python: python3
  notify:
    - restart funkwhale

- name: "Collect static files"
  command: "{{ funkwhale_install_path }}/virtualenv/bin/python api/manage.py collectstatic --no-input"
  become: true
  become_user: "{{ funkwhale_username }}"
  args:
    chdir: "{{ funkwhale_install_path }}"

- name: "Apply database migrations"
  become: true
  become_user: "{{ funkwhale_username }}"
  command: "{{ funkwhale_install_path }}/virtualenv/bin/python api/manage.py migrate --no-input"
  args:
    chdir: "{{ funkwhale_install_path }}"
